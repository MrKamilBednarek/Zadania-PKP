Rozwiązania zadań proszę zacommitować na repozytorium GIT.


1.
1.A. W jakim celu używa się klas abstrakcyjnych, a w jakim interfejsów?

1.A.Rozwiązanie
Jedno i drugie gdy potrzebujemy użyć jakichś metod w wielu klasach.
Jeżeli mamy mieć jakąś konkretną hierarchię klas, to wygodnie użyc klasy abstrakcyjnej i po niej dziedziczyć. Zmiany w klaise bazowej od razu są dostępne w podklasach.
Jak jednak potrzebujemy tylko różnych działań dla jakichś metod, to wygodniej użyć interfejsów. Poza tym można zaimplementować kilka interfejsów, a dziedziczyć tylko po jednej klasie. Interfejsy nie mogą jednak przechowywać stanu (tylko stałe i deklaracje metod).
Dla przykładu można by na przykład zrobić klasę abstrakcyjną zwierzę i do tego takie klasy pochodne jak ryba, ssak itp (które też by się dzieliły). Wiadomo, że każde zwierze np oddycha, ma jakąś masę itd. I czego się nie wymyśli co jest prawdziwe dla zwierząt od razu było by dostępne dla klas pochodnich.
Za to do takiej klasy pochodnej ryba można by dodać pływanie implementujac interfejs i opisujac ze ryba plywa machajac płetwami i odpowiednio wypełniając pęcherz pławny. Bo ten sam interfejs możemy użyć dla obiektu statek który nie ma nic wspólnego z naszą klasą zwierzę i oczywiście opis tego pływania będzie zupełnie inny.

1.B. Czym różni się tablica od listy liniowej?

1.B.Rozwiązanie
Tablica ma stały rozmiar podany przy tworzeniu, lista może go zmieniać.
W tablicy dostęp do elementu odbywa się poprzez podanie indeksu, w liscie elementy mają znacznik na kolejny element (i na poprzedni w dwukierunkowej). Bezpośredni dostęp jest możliwy tylko do pierwszego elementu.
Co za tym idzie do odczytu elementu na n-tej pozycji w tablicy potrzebna jest jedna operacja, w liscie n operacji (trzeba przejść po kolei od pierwszego elementu do elementu n).


2.
Mając tablicę int[] numbers, wypełnioną liczbami całkowitymi i posortowaną malejąco ( numbers[i] > numbers[i+1] ), sprawdź czy występuje w niej liczba int x. Metoda powinna zwracać wartość TRUE, jeśli dana liczba występuje oraz FALSE w przeciwnym wypadku. W rozwiązaniu zależy nam na jak najmniejszej złożoności obliczeniowej (priorytet) oraz pamięciowej. Podaj szacowaną złożoność obliczeniową oraz pamięciową. Poniżej sygnatura metody do napisania.

private boolean search(int[] numbers, int x){}

2.Rozwiązanie
    private boolean search(int[] numbers, int x){
        if(numbers.length==0){
            return false;
        }
        else {
            int bigger = 0;
            int smaller = numbers.length - 1;
            int middle;
            if (numbers[bigger] < x || numbers[smaller] > x) {
                return false;
            } else {
                while ((smaller - bigger) > 1) {
                    middle = (smaller + bigger) / 2;
                    if (numbers[middle] < x) {
                        smaller = middle;
                    } else {
                        bigger = middle;
                    }
                }
                if (numbers[smaller] == x || numbers[bigger] == x) {
                    return true;
                }
            }
        }
        return false;
    }
	
	Złożoność obliczeniowa to O(log(n)), złożoność pamięciowa jest liniowa O(n).

3.
Napisz program, który wykorzysta API Kanye Rest https://kanye.rest/ by każdorazowo zaproponować nową perełkę mądrości od Kanye Westa. Program powinien być obsługiwany z poziomu konsoli i obsługiwać komendę "next" by wywołać następny cytat. Program nie potrzebuje oprawy graficznej. Zwróć uwagę na poprawną architekturę aplikacji oraz na czystość kodu.
Dla chętnych, za dodatkowe punkty: dodaj zapisywanie cytatów w pamięci, by upewnić się, że każdy kolejny cytat jest nowy. 